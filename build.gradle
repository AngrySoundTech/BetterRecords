/////////////////////////////
// BuildScript and Plugins //
/////////////////////////////

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlin_version}"
    id 'org.jetbrains.dokka' version "1.9.10"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

version = "${minecraft_version}-${mod_version}"

//////////////////
// Dependencies //
//////////////////

repositories {
    maven {
        name 'Kotlin for Forge'
        url 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "thedarkcolour:kotlinforforge:${kotlinforforge_version}"
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    runs {
        client {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'betterrecords'
            workingDirectory project.file('run')
            mods {
                betterrecords {
                    source sourceSets.main
                }
            }
        }
        server {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'betterrecords'
            workingDirectory project.file('run')
            mods {
                betterrecords {
                    source sourceSets.main
                }
            }
        }
    }
}

///////////////
// Artifacts //
//////////////

def replacedProperties = [
        version: version,
        loader_range: loader_range,
        forge_range: forge_range,
        minecraft_range: minecraft_range,
]

processResources {
    inputs.properties(replacedProperties)

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand(replacedProperties)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    //noinspection GroovyAccessibility
    archiveClassifier = 'deobf'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    //noinspection GroovyAccessibility
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    //noinspection GroovyAccessibility
    archiveClassifier = 'javadoc'
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}
